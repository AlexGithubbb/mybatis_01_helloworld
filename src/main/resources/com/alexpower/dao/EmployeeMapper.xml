<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.alexpower.dao.EmployeeMapper">
    <cache eviction="FIFO" flushInterval="60000" readOnly="false" size="1024" ></cache>
    <!--
    eviction: 缓存的回收策略：
        LRU – Least Recently Used: Removes objects that haven't been used for the longst period of time.
        FIFO – First In First Out: Removes objects in the order that they entered the cache. (Mybatis default)
        SOFT – Soft Reference: Removes objects based on the garbage collector state and the rules of Soft References.
        WEAK – Weak Reference: More aggressively removes objects based on the garbage collector state and rules of Weak References.

    flushInterval: 缓存刷新间隔： /ms
    readOnly:
        true:  A read-only cache will return the same instance of the cached object to all callers.
               Thus such objects should not be modified. This offers a significant performance advantage though
        false: will return a copy (via serialization) of the cached object. This is slower, but safer, and thus the default is false.

    -->

<!--    public Map<Integer, Employee> getEmpsByNameLikeReturnMap(String name);-->
    <select id="getEmpsByNameLikeReturnMap" resultType="com.alexpower.bean.Employee">
        select * from employees where last_name like #{nameLike}
    </select>


    <!--    public Map<String, Object> getEmpByIdReturnMap(Integer id);-->
    <select id="getEmpByIdReturnMap" resultType="map">
        select * from employees where id = #{id}
    </select>


    <!--    public List<Employee> getEmpsByNameLike(String name);
            resultType: should still be the element type even though it returns a list
    -->
    <select id="getEmpsByNameLike" resultType="com.alexpower.bean.Employee">
        select * from employees where last_name like #{nameLike}
    </select>

    <!--public Employee getEmpById(Integer id); -->
    <!-- resultType can be mapped from the config file : mybatis-config.xml -->

<!--    public Employee getEmpByMap(HashMap map);-->
    <select id="getEmpByMap" resultType="com.alexpower.bean.Employee">
        select *  from employees where id = #{id} and last_name = #{lastName}
    </select>

    <!--    public Employee getEmpByIdAndLastName(@(param) Integer id, @(param) String lastName);-->
    <select id="getEmpByIdAndLastName" resultType="com.alexpower.bean.Employee">
        select *  from employees where id = #{id} and last_name = #{lastName}
    </select>

    <!-- valid if connecting to Mysql db -->
    <select id="getEmpById" resultType="com.alexpower.bean.Employee" databaseId="mysql" useCache="true">
        select *  from employees where id = #{id}
    </select>

    <!-- valid if connecting to Oracle db -->
    <select id="getEmpById" resultType="com.alexpower.bean.Employee" databaseId="oracle">
        select *  from employees where id = #{id}
    </select>

    <!-- useGeneratedKeys="true" && keyProperty="id" would allow us to get auto_increment primary key value (id) -->
    <insert id="addEmp"
            useGeneratedKeys="true" keyProperty="id">
        insert into employees (last_name, gender , email)
        values(
        #{lastName}, #{gender}, #{email}
        )
    </insert>

    <!-- Oracle insert-->
    <insert id="addEmp" databaseId="oracle">
    /* keyProperty 指定查出的主键值自动封装给 javaBean 的哪个属性
    order: BEFORE: / AFTER

    BEFORE (recommend)
    先运行selectKey查询id的sql, 查出id的值封装给javaBean对应的id属性
    再运行插入的SQL， 就可以取出自增键的值 （id）： select EMPLOYEE_SEQ.nextval from dual

    AFTER
    先运行插入的SQL， 从序列中取出自增键的值 （id）
    再运行selectKey查询当前id的sql, 查出当前id的值封装给javaBean对应的id属性 ： select EMPLOYEE_SEQ.currval from dual
    */

    -- BEFORE way
        <selectKey keyProperty="id" order="BEFORE" resultType="Integer">
            select EMPLOYEE_SEQ.nextval from dual
        </selectKey>
        /* 插入时的主键是从序列中拿到的*/
        /* BEFORE get primary key value (id)*/
        insert into employees (EMPLOYEE_ID, LAST_NAME, EMAIL )
        values(
        #{id}, #{lastName}, #{email<!--, jdbcType=NULL-->}
        )

    -- AFTER way
<!--        insert into employees (EMPLOYEE_ID, LAST_NAME, EMAIL )-->
<!--                values(employee_seq.nextval, #{lastName}, #{email})-->

<!--        <selectKey keyProperty="id" order="AFTER" resultType="Integer">-->
<!--            select EMPLOYEE_SEQ.currval from dual-->
<!--        </selectKey>-->
    </insert>


    <update id="updateEmp">
        update employees
        set last_name = #{lastName}, gender = #{gender}, email = #{email}
        where id = #{id}
    </update>

    <delete id="deleteEmpById">
        delete from employees where id = #{id}
    </delete>


</mapper>